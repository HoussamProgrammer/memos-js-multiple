{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"query element": {
		"prefix": "qs",
		"body": [
			"const $1 = document.querySelector('#$2');"
		],
		"description": "get element with document"
	},
	"quoted string html": {
		"prefix": "ss__html",
		"body": [
			"/*html*/"
		],
		"description": "quoted string for html"
	},
	"quoted string css": {
		"prefix": "ss__css",
		"body": [
			"/*css*/"
		],
		"description": "quoted string for css"
	},
	"repeat_fn": {
		"prefix": "repeat_fn",
		"body": [
			"[...Array($1).keys()].forEach( it => { $2 });"
		],
		"description": "repeat_fn"
	},
	"to_array": {
		"prefix": "to_array",
		"body": [
			"Object.values($1).forEach( it => { $2 });"
		],
		"description": "to_array from object"
	},
	"try_catch_ex": {
		"prefix": "try_catch_ex",
		"body": [
			"try {",
			"\t$1",
			"}",
			"catch (ex) {",
			"\tconsole.log(`🚫 $2 #ex, `, ex);",
			"}"
		],
		"description": "try catch snippet"
	},
	"not_implemented_error": {
		"prefix": "ll_not_implemented_error",
		"body": [
			"console.error(` - [${this.constructor.name}] $1() not implemented yet`);"
		],
		"description": "log_for_not_implemented_error"
	},
	"not_implemented_warn": {
		"prefix": "ll_not_implemented_warn",
		"body": [
			"console.warn(` - [${this.constructor.name}] $1() not implemented yet`);"
		],
		"description": "log_for_not_implemented_warn"
	},
	"Print to console": {
		"prefix": "ll",
		"body": [
			"console.log('');"
		],
		"description": "Log output to console"
	},
	"add import ": {
		"prefix": "rr",
		"body": [
			"const $1 = require('$1');"
		],
		"description": "add lib as require"
	},
	"WC static observerd values": {
		"prefix": "static_observerd_values",
		"body": [
			"static get observedAttributes() { return [ $1 ]; }"
		],
		"description": "static observed values"
	},
	"Not Implemented Log": {
		"prefix": "nn",
		"body": [
			"console.log(`📵 $1 not Implemented yet!`);"
		],
		"description": "not implemented yet"
	},
	"assert function": {
		"prefix": "infff assert 🛃 function",
		"body": [
			"console.log(`|__ 🛃 $1() #arg: $2`);"
		],
		"description": "assert func"
	},
	"assert valid Value": {
		"prefix": "infff assert ✅ valid",
		"body": [
			"console.log(`|__ ✅ VALID #arg: $1`);"
		],
		"description": "valid value"
	},
	"asset invalid Value": {
		"prefix": "infff assert ❌ invalid",
		"body": [
			"console.log(`|__ ❌ INVALID #arg: $1`);"
		],
		"description": "invalid value"
	},
	"asset forbidden Value": {
		"prefix": "infff assert ⛔️ forbidden",
		"body": [
			"console.log(`|__ ⛔️ #arg: $1`);"
		],
		"description": "forbidden value"
	},
	"Print with emoji green": {
		"prefix": "inffa 🟢 circle-green",
		"body": [
			"console.log(`🟢 connected !`);"
		],
		"description": "Log output to console"
	},
	"Print with emoji orange": {
		"prefix": "inffa 🟠 circle-orange",
		"body": [
			"console.log(`🟠 in progress...`);"
		],
		"description": "Log output to console"
	},
	"Print with emoji red": {
		"prefix": "inffa 🔴 circle-red",
		"body": [
			"console.log(`🔴 closed`);"
		],
		"description": "Log output to console"
	},
	"Print sandard console log with emoji space": {
		"prefix": "llspaceship 🚀 space-ship",
		"body": [
			"console.log('🚀 $1');"
		],
		"description": "Log output to console"
	},
	"Import snippet": {
		"prefix": "im",
		"body": [
			"import { $1 } from '$2';$3"
		],
		"description": "Log output to console"
	},
	"Make Object with default": {
		"prefix": "make_as_default",
		"body": [
			"export default function make$1 () {",
			"\t$2",
			"\t",
			"\treturn {",
			"\t\t",
			"\t};",
			"}"
		],
		"description": "maker of object as default"
	},
	"Make Object": {
		"prefix": "make_alone",
		"body": [
			"function make$1 () {",
			"\t$2",
			"\t",
			"\treturn {",
			"\t\t",
			"\t};",
			"}"
		],
		"description": "maker of object"
	},
	"setter-getter": {
		"prefix": "setter_getter",
		"body": [
			"set $1(value) {",
			"\t_$1 = value;",
			"},",
			"get $1(){",
			"\treturn _$1;",
			"}",
		],
		"description": "setter-getter"
	},
	"setter-getter_class": {
		"prefix": "setter_getter_class",
		"body": [
			"set $1(value) { this.setAttribute('$1', value);}",
			"get $1() { return this.getAttribute('$1'); }\n",
		],
		"description": "setter-getter on class"
	},
	"div tag": {
		"prefix": "div tag",
		"body": [
			"<div class=\"\" id=\"container\"><div>"
		],
		"description": "add div tag"
	},
	"Section Comment": {
		"prefix": "ccsection",
		"body": [
			"/* ================================= ",
			" * $1",
			" * ================================= */",
		],
		"description": "section comment for scss"
	},
	"Sub Section Comment": {
		"prefix": "ccsubsection",
		"body": [
			"/* $1",
			" * ================================= */",
		],
		"description": "sub section comment for scss"
	},
	"Comment warning": {
		"prefix": "ccwarning",
		"body": [
			"// /!\\ 🚨 $1 /!\\ ",
		],
		"description": "comment with warning emoji"
	},
	"Comment orange diamond": {
		"prefix": "cc_orange_diamond",
		"body": [
			"// --------------------------------------------------------------------------------------------------",
			"// 🔸 $1",
			"// --------------------------------------------------------------------------------------------------"
		],
		"description": "comment with orange diamond"
	},
	"Comment blue diamond": {
		"prefix": "cc_blue_diamond",
		"body": [
			"// --------------------------------------------------------------------------------------------------",
			"// 🔹 $1",
			"// --------------------------------------------------------------------------------------------------"
		],
		"description": "comment with blue diamond"
	},
	"Green Circle Emoji": {
		"prefix": "cg",
		"body": [
			"🟢 "
		],
		"description": "Green circle for task"
	},
	"Print with emoji space": {
		"prefix": "inffa 🚀 space-ship",
		"body": [
			"console.log(`🚀 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print with emoji another satellite": {
		"prefix": "inffa 📡 api",
		"body": [
			"console.log(`📡 $1`, $2);"
		],
		"description": "Log output to console"
	},
	"Print with emoji satellite": {
		"prefix": "infff 🛰 mediator",
		"body": [
			"console.log(`🛰 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji work": {
		"prefix": "infff 🚧 work",
		"body": [
			"console.log(`🚧 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji parse": {
		"prefix": "infff 🗜 parse",
		"body": [
			"console.log(`🗜 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji chain": {
		"prefix": "infff 🔗 proto",
		"body": [
			"console.log(`🔗 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji electric plug": {
		"prefix": "infff 🔌 plug",
		"body": [
			"console.log(`🔌 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji job": {
		"prefix": "infff 🔧 job",
		"body": [
			"console.log(`🔧 #$1: `, );"
		],
		"description": "Log output to console"
	},
	"Print with emoji repeat": {
		"prefix": "infff 🔁 repeat",
		"body": [
			"console.log('🔁 #it:', it)"
		],
		"description": "Log output to console"
	},
	"Print with emoji key": {
		"prefix": "infff 🔑 key",
		"body": [
			"console.log(`🔑 #key: $1`, key);"
		],
		"description": "value of key"
	},
	"Print with emoji model": {
		"prefix": "infff 🍰 model",
		"body": [
			"console.log('🍰 ', it);"
		],
		"description": "Log output to console"
	},
	"Print with emoji observer": {
		"prefix": "infff 🔭 observer",
		"body": [
			"console.log('🔭 #$1: ', $2);"
		],
		"description": "Log output to console"
	},
	"Print with emoji file read": {
		"prefix": "infff 📃 read",
		"body": [
			"console.log(`📃 #$1: `, $2);"
		],
		"description": "Log output to console"
	},
	"Print with emoji update": {
		"prefix": "infff 🪚 update",
		"body": [
			"console.log(`🪚 #$1: `, $2);"
		],
		"description": "Log output to console"
	},
	"info flash light": {
		"prefix": "infff 🔦 flash light",
		"body": [
			"// 🔦 $1",
		],
		"description": "comment with flash light emoji"
	},
	"info time": {
		"prefix": "infff ⏰ clock",
		"body": [
			"console.log(`⏰ #$1: `, $2);",
		],
		"description": "comment with time emoji"
	},
	"Print empty sign": {
		"prefix": "infff 🚫 exception",
		"body": [
			"console.log(`🚫 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print no mobile sign": {
		"prefix": "infff 📵 not found",
		"body": [
			"console.log(`📵 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print package": {
		"prefix": "infff 📦 package",
		"body": [
			"console.log(`📦 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print package component": {
		"prefix": "inffa 📦 web-component",
		"body": [
			"console.log(`📦 #$1: `, $2);"
		],
		"description": "Log output to console"
	},
	"Print clean": {
		"prefix": "infff 🗑 clean",
		"body": [
			"console.log(`🗑 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print red flag": {
		"prefix": "infff 🚩 redflag",
		"body": [
			"console.log(`🚩 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print red with todo": {
		"prefix": "cc todo 🚩",
		"body": [
			"// TODO: 🚩 "
		],
		"description": "add todo with red flag"
	},
	"Print finish": {
		"prefix": "infff 🏁 finish",
		"body": [
			"console.log(`🏁 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print yes": {
		"prefix": "infff 👍 yes_thumbs_up",
		"body": [
			"console.log(`👍 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print add": {
		"prefix": "infff 📥 add",
		"body": [
			"console.log(`📥 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"Print click": {
		"prefix": "infff 🖱 mouse",
		"body": [
			"console.log(`🖱 $1`);"
		],
		"description": "Log output to console"
	},
	"Print keyboard": {
		"prefix": "infff 💻 keyboard",
		"body": [
			"console.log(`💻 $1`);"
		],
		"description": "Log output to console"
	},
	"Print event": {
		"prefix": "infff 🔥 fire",
		"body": [
			"console.log(`🔥 \\${$1\\}`);"
		],
		"description": "Log output to console"
	},
	"class element": {
		"prefix": "class-element",
		"body": [
			"// 'for one shot' use template to be parsed only once time, for n usage 👍",
			"// 'for multiple modifications' use 'const fragment = document.createDocumentFragment();'",
			"const template = document.createElement('template');",
			"template.innerHTML = ",
			"`",
			"\t",
			"`;",
			"",
			"export default class $1 extends HTMLElement {",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\tthis._isMount = false;",
			"\t}",
			"",
			"\t// --------------------------------------------------------------------------------------------------",
			"\t// 🔹 NATIVE METHODS",
			"\t// --------------------------------------------------------------------------------------------------",
			"",
			"\t// after component is define in customElements and attached to DOM",
			"\t// all setup need to be here",
			"\tconnectedCallback() {",
			"\t\tthis.setupComponent();",
			"\t}",
			"",
			"\tadoptedCallback() {",
			"\t\tconsole.log('moved to a new document');",
			"\t}",
			"",
			"\tdisconnectedCallback() {",
			"\t\t// disable all animations",
			"\t\t// remove all events listeners",
			"\t\t// dispose all observables",
			"\t}",
			"",
			"\tstatic get observedAttributes() {",
			"\t\treturn ['disabled'];",
			"\t}",
			"",
			"\tset disabled(bool) {",
			"\t\tthis.setAttribute('disabled', bool.toString());",
			"\t}",
			"",
			"\tget disabled() {",
			"\t\treturn this.getAttribute('disabled') === true;",
			"\t}",
			"",
			"\tattributeChangedCallback(attrName, oldVal, newVal) {",
			"\t\t// add switchLiteral For observed attributes",
			"\t}",
			"",
			"\t// --------------------------------------------------------------------------------------------------",
			"\t// 🔸 CUSTOM METHODS",
			"\t// --------------------------------------------------------------------------------------------------",
			"\tsetupComponent() {",
			"\tif(!this.extractContent()) {",
			"\t\tconsole.warn('extractContent() failed!');",
			"\t\treturn;",
			"\t}",
			"",
			"\t// adding properties",
			"",
			"\t// getting attributes",
			"",
			"\t// load content",
			"\t\tthis.loadTemplate();",
			"\t\tthis.extractReferencesElements();",
			"\t\tthis.bindEventsHandlers();",
			"\t\t//this.setupAnimation();",
			"\t}",
			"",
			"\tloadTemplate() {",
			"\t\t//this.appendChild(template.content.cloneNode(true));",
			"\t}",
			"",
			"\textractReferencesElements() {",
			"\t\t",
			"\t}",
			"",
			"\tbindEventsHandlers() {",
			"\t\t",
			"\t}",
			"}"
		],
		"description": "Log output to console"
	}
}